x = (1,2)
x <- (1,2)
x <- c(1,2)
2^10
?.Machine
.Machine
my.first.app <- function(){"Hello World!"}
my.first.app()
type(my.first.app())
class(my.first.app())
my.first.app <- function{"Hello World!"}
my.first.app <- function(){Hello World!}
pareto.simulator <- function(rdraws, alpha){
paretodraw <- (1-rdraws)**(-1/alpha)
}
pareto.simulator(runif(100), 2)
s<-pareto.simulator(runif(100), 2)
hist(pareto.simulator(runif(100), 2))
hist(pareto.simulator(runif(1000), 2))
hist(pareto.simulator(runif(1000), 5))
var(c(2,5,7))
var(c(4,10,14))
var(c(2,5,7))/5
var(c(4,10,14))/10
var(c(2,5,7))/25
var(c(4,10,14))/100
sd(c(3,5,7))
sd(c(6,10,14))
sd(c(3,5,7))/5
sd(c(6,10,14))/10
library("foreign", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
PFpackages <- c('biglm', 'ffbase', 'ggplot2', 'sgd')
install.packages(PFpackages, repos = 'http://cran.rstudio.com/')# ffbase Provides support for data.frame like objects that connect to
require(ffbase)
require(biglm)
# ggplot2 is for flexible plotting
require(ggplot2)
# sgd is for stochastic gradient descent methods
require(sgd)
install.packages("ggplot2")
install.packages("plyr")
load("/media/balint/Storage/Tanulas/Computing Lab/Project/lyrics_data.RData")
lyrics[56777]
library(mvtnorm)
# create small wrapper functions
sigmaXY <- function(rho, sdX, sdY) {
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
# creating a function for all of this
loanData <- function(noApproved, noDenied, noUndecided,
muApproved, muDenied, muUndecided,
sdApproved, sdDenied, sdUndecided,
rhoApproved, rhoDenied, rhoUndecided, seed=1111) {
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
sigmaUndecided <- sigmaXY(rho=rhoUndecided, sdX=sdUndecided[1], sdY=sdUndecided[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
undecided <- genBVN(noUndecided, muUndecided, sigmaUndecided, seed = seed+1)
loanDf <- as.data.frame(rbind(approved,denied,undecided))
deny <- c(rep("Approved", noApproved), rep("Denied", noDenied), rep("Undecided", noUndecided))
targetApproved = c(rep(1, noApproved), rep(0, noDenied), rep(0, noUndecided))
targetDenied = c(rep(0, noApproved), rep(1, noDenied), rep(0, noUndecided))
targetUndecided = c(rep(0, noApproved), rep(0, noDenied), rep(1, noUndecided))
loanDf <- data.frame(loanDf, deny, targetApproved, targetDenied, targetUndecided)
colnames(loanDf) <- c("PIratio", "solvency", "deny", "targetApproved", "targetDenied", "targetUndecided")
return(loanDf)
}
loanDf <- loanData(noApproved=50, noDenied=50, noUndecided=25,
c(4, 150), c(10, 100), c(8, 160),
c(1,20), c(2,30), c(2, 10), -0.1, 0.6, 0.2, 1221)
# analytical solution
X <- as.matrix(cbind(ind=rep(1, nrow(loanDf)),
loanDf[,c("PIratio", "solvency")]))
Y <- as.matrix(loanDf[,c("targetApproved", "targetDenied", "targetUndecided")])
weightsOptim <- solve(t(X)%*%X) %*% t(X) %*% Y
# compute predictions
predictions <- data.frame(X %*% weightsOptim)
names(predictions) <- c("predictionApproved", "predictionDenied", "predictionUndecided")
loanDf <- cbind(loanDf, predictions)
# classify according to the argmax criterion
loanDf$predictedLabels[loanDf$predictionApproved > loanDf$predictionDenied
& loanDf$predictionApproved > loanDf$predictionUndecided] <- "Approved"
loanDf$predictedLabels[loanDf$predictionDenied > loanDf$predictionApproved
& loanDf$predictionDenied > loanDf$predictionUndecided] <- "Denied"
loanDf$predictedLabels[loanDf$predictionUndecided > loanDf$predictionApproved
& loanDf$predictionUndecided > loanDf$predictionDenied] <- "Undecided"
# classification algorithm performance
table(loanDf$deny, loanDf$predictedLabels)
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=(c(,)))
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial"))
View(weightsOptim)
View(X)
View(Y)
View(predictions)
View(weightsOptim)
b <- -weightsOptim[1,]
rep(1, 3)
A <- rbind(rep(1, 3), weightsOptim[1,])
View(A)
A <- rbind(rep(1, 3), weightsOptim[-1,])
View(A)
A <- rbind(rep(-1, 3), weightsOptim[-1,])
View(A)
solve(A, b)
A <- t(rbind(rep(-1, 3), weightsOptim[-1,]))
solve(A, b)
intersection <- solve(A, b)
View(loanDf)
lowpiont <- 0.9*min(loanDf$solvency)
lowsolvency <- 0.9*min(loanDf$solvency)
highsolvency <- 1.1*max(loanDf$solvency)
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1$solvency-weights2$solvency)+weights1$ind-weights2$ind)/(weights2$PIratio-weights1$PIratio)
}
weightsOptim$targetApproved
weightsOptim[,"targetApproved"]
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
w<-weightsOptim[,"targetApproved"]
w["solvency"]
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"]/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
}
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
piratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
View(loanDf)
pilowsolvAD <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pilowsolvAU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pilowsolvDU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pihighsolvAD <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pihighsolvAU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pihighsolvDU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pilowsolvAD
intersection
intersection["PIratio"]
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
prediction <- function(solvency, PIratio, weights){
r <- weights["ind"]+weights["solvency"]*solvency+weights["PIratio"]*PIratio
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
View(loanDf)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
if( prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetDenied"])){
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAU), deny=rep("boundaryAU",2) )
} else {
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAU), deny=rep("boundaryAU",2) )
}
if( prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetDenied"]) > prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetApproved"])){
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvDU), deny=rep("boundaryDU",2) )
} else {
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvDU), deny=rep("boundaryDU",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1) +
geom_line(data=boundaryDf2) +
geom_line(data=boundaryDf3)
table(loanDf$deny, loanDf$predictedLabels)
lowPIratio <- 0.9*min(loanDf$PIratio)
highPIratio <- 1.1*max(loanDf$PIratio)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
install.packages("fractal")
install.packages("car")
library(car)
library(fractal)
library(tseries)
if (!require('devtools')) install.packages('devtools')
devtools::install_github("abarciauskas-bgse/bplmnist")
library(bplmnist)
setwd("/media/balint/Storage/Tanulas/Kaggle/news_popularity")
library(ggplot2)
library(RColorBrewer)
news_popularity_training <- read.csv("news_popularity_training.csv")
news_popularity_training$popularity <- as.factor(news_popularity_training$popularity)
news_popularity_training <- news_popularity_training[-which(news_popularity_training$n_non_stop_words>2),]
names(news_popularity_training)[34]
names(news_popularity_training)[26]
names(news_popularity_training)[27]
names(news_popularity_training)[28]
for(i in 3:61){
filename <- paste("explore/kw_max_avg_X_", names(news_popularity_training[i]), ".jpg", sep = "")
jpeg(file = filename)
print( ggplot(news_popularity_training,
aes_q(x = as.name(names(news_popularity_training)[28]),
y = as.name(names(news_popularity_training)[i]),
color = as.name("popularity"))) +
theme_bw() +
stat_ellipse()
)
dev.off()
}
warnings()
names(news_popularity_training)[14]
names(news_popularity_training)[24]
names(news_popularity_training)[20]
names(news_popularity_training)[39]
names(news_popularity_training)[41]
names(news_popularity_training)[45]
for(i in 3:61){
filename <- paste("explore/LDA4_X_", names(news_popularity_training[i]), ".jpg", sep = "")
jpeg(file = filename)
print( ggplot(news_popularity_training,
aes_q(x = as.name(names(news_popularity_training)[45]),
y = as.name(names(news_popularity_training)[i]),
color = as.name("popularity"))) +
theme_bw() +
stat_ellipse()
)
dev.off()
}
View(news_popularity_training)
news_popularity_training$newfeat <- news_popularity_training$timedelta * news_popularity_training$num_hrefs
news_popularity_test$newfeat <- news_popularity_test$timedelta * news_popularity_training$num_hrefs
news_popularity_test<- read.csv("news_popularity_test.csv")
news_popularity_training$newfeat2 <- news_popularity_training$timedelta * news_popularity_training$LDA_02
news_popularity_training$newfeat3 <- news_popularity_training$timedelta * news_popularity_training$LDA_03
news_popularity_training$newfeat4 <- news_popularity_training$kw_max_avg * news_popularity_training$LDA_03
news_popularity_training$newfeat5 <- news_popularity_training$kw_max_avg * news_popularity_training$kw_avg_avg
news_popularity_training$newfeat6 <- news_popularity_training$kw_avg_avg * news_popularity_training$kw_avg_max
news_popularity_training$newfeat7 <- news_popularity_training$LDA_03 * news_popularity_training$LDA_04
news_popularity_training$newfeat8 <- news_popularity_training$kw_avg_avg * news_popularity_training$max_positive_polarity
news_popularity_training$newfeat9 <- news_popularity_training$kw_max_avg * news_popularity_training$kw_min_avg
news_popularity_training$newfeat10 <- news_popularity_training$kw_max_avg * news_popularity_training$num_hrefs
news_popularity_training$newfeat11 <- news_popularity_training$kw_max_avg * news_popularity_training$num_imgs
cat("\n small model")
news_popularity_training <- read.csv("news_popularity_training.csv")
news_popularity_test<- read.csv("news_popularity_test.csv")
news_popularity_training <- news_popularity_training[-which(news_popularity_training$n_non_stop_words>2),]
news_popularity_training$popularity <- as.factor(news_popularity_training$popularity)
news_popularity_training$newfeat <- news_popularity_training$timedelta * news_popularity_training$num_hrefs
news_popularity_test$newfeat <- news_popularity_test$timedelta * news_popularity_training$num_hrefs
news_popularity_test$newfeat <- news_popularity_test$timedelta * news_popularity_test$num_hrefs
news_popularity_training_big <- news_popularity_training
news_popularity_training$newfeat2 <- news_popularity_training$timedelta * news_popularity_training$LDA_02
news_popularity_training$newfeat3 <- news_popularity_training$timedelta * news_popularity_training$LDA_03
news_popularity_training$newfeat4 <- news_popularity_training$kw_max_avg * news_popularity_training$LDA_03
news_popularity_training$newfeat5 <- news_popularity_training$kw_max_avg * news_popularity_training$kw_avg_avg
news_popularity_training$newfeat6 <- news_popularity_training$kw_avg_avg * news_popularity_training$kw_avg_max
news_popularity_training$newfeat7 <- news_popularity_training$LDA_03 * news_popularity_training$LDA_04
news_popularity_training$newfeat8 <- news_popularity_training$kw_avg_avg * news_popularity_training$max_positive_polarity
news_popularity_training$newfeat9 <- news_popularity_training$kw_max_avg * news_popularity_training$kw_min_avg
news_popularity_training$newfeat10 <- news_popularity_training$kw_max_avg * news_popularity_training$num_hrefs
news_popularity_training$newfeat11 <- news_popularity_training$kw_max_avg * news_popularity_training$num_imgs
View(news_popularity_test)
View(news_popularity_training)
names(news_popularity_training)[63]
c(1:2, 63:73)
set.seed(0)
tr.idx <- sample(nrow(news_popularity_training), 2/3*nrow(news_popularity_training))
tr.train <- news_popularity_training[tr.idx, ]
te.train <- news_popularity_training[-tr.idx, ]
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-c(1:2, 63:73)],
ntree=400, mtry = 21)
pred <- predict(randomforest1, te.train)
cat("\n small model:")
sum(sum(pred==te.train$popularity)/nrow(te.train))
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-(1:2)],
ntree=400, mtry = 21)
pred <- predict(randomforest1, te.train)
cat("\n big model:")
sum(sum(pred==te.train$popularity)/nrow(te.train))
library(randomForest)
set.seed(0)
tr.idx <- sample(nrow(news_popularity_training), 2/3*nrow(news_popularity_training))
tr.train <- news_popularity_training[tr.idx, ]
te.train <- news_popularity_training[-tr.idx, ]
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-c(1:2, 63:73)],
ntree=400, mtry = 21)
pred <- predict(randomforest1, te.train)
cat("\n small model:")
sum(sum(pred==te.train$popularity)/nrow(te.train))
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-(1:2)],
ntree=400, mtry = 21)
pred <- predict(randomforest1, te.train)
cat("\n big model:")
sum(sum(pred==te.train$popularity)/nrow(te.train))
set.seed(45)
tr.idx <- sample(nrow(news_popularity_training), 2/3*nrow(news_popularity_training))
tr.train <- news_popularity_training[tr.idx, ]
te.train <- news_popularity_training[-tr.idx, ]
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-c(1:2, 63:73)],
ntree=400, mtry = 21)
names(news_popularity_training)[63]
set.seed(45)
tr.idx <- sample(nrow(news_popularity_training), 2/3*nrow(news_popularity_training))
tr.train <- news_popularity_training[tr.idx, ]
te.train <- news_popularity_training[-tr.idx, ]
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-c(1:2, 64:73)],
ntree=400, mtry = 21)
pred <- predict(randomforest1, te.train)
cat("\n small model:")
sum(sum(pred==te.train$popularity)/nrow(te.train))
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-(1:2)],
ntree=400, mtry = 21)
pred <- predict(randomforest1, te.train)
cat("\n big model:")
sum(sum(pred==te.train$popularity)/nrow(te.train))
set.seed(453)
tr.idx <- sample(nrow(news_popularity_training), 2/3*nrow(news_popularity_training))
tr.train <- news_popularity_training[tr.idx, ]
te.train <- news_popularity_training[-tr.idx, ]
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-c(1:2, 64:73)],
ntree=400, mtry = 21)
pred <- predict(randomforest1, te.train)
cat("\n small model:")
sum(sum(pred==te.train$popularity)/nrow(te.train))
randomforest1 <- randomForest(popularity ~ .,
data=tr.train[,-(1:2)],
ntree=400, mtry = 21)
pred <- predict(randomforest1, te.train)
cat("\n big model:")
sum(sum(pred==te.train$popularity)/nrow(te.train))
library(randomForest)
news_popularity_training <- read.csv("news_popularity_training.csv")
news_popularity_test<- read.csv("news_popularity_test.csv")
news_popularity_training <- news_popularity_training[-which(news_popularity_training$n_non_stop_words>2),]
news_popularity_training$popularity <- as.factor(news_popularity_training$popularity)
news_popularity_training$newfeat <- news_popularity_training$timedelta * news_popularity_training$num_hrefs
news_popularity_test$newfeat <- news_popularity_test$timedelta * news_popularity_test$num_hrefs
set.seed(112)
randomforest1 <- randomForest(popularity ~ .,
data=news_popularity_training[,-(1:2)],
ntree=400, mtry = 21)
popularity_prediction <- predict(randomforest1, news_popularity_test)
submit <- data.frame(id = news_popularity_test$id, popularity = as.numeric(popularity_prediction))
write.csv(submit, file = "new_pop_prediction_randomforest1.csv", row.names = FALSE)
news_popularity_test<- read.csv("news_popularity_test.csv")
